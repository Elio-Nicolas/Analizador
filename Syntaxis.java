
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 23 21:18:23 ART 2022
//----------------------------------------------------

package Principal;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 23 21:18:23 ART 2022
  */
public class Syntaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Syntaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\022\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\005\000\002\004" +
    "\007\000\002\004\007\000\002\004\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\011\000\002\004\011\000" +
    "\002\006\011\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\006\000\002\013" +
    "\007\000\002\007\015\000\002\010\011\000\002\011\013" +
    "\000\002\012\011\000\002\014\012\000\002\014\011\000" +
    "\002\005\005\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\042\005\001\002\000\004\002\174\001" +
    "\002\000\004\037\006\001\002\000\004\036\007\001\002" +
    "\000\004\044\010\001\002\000\004\045\011\001\002\000" +
    "\004\043\012\001\002\000\004\035\013\001\002\000\004" +
    "\027\014\001\002\000\004\007\015\001\002\000\004\033" +
    "\016\001\002\000\004\034\017\001\002\000\004\037\020" +
    "\001\002\000\004\030\021\001\002\000\004\031\022\001" +
    "\002\000\014\007\027\010\024\012\031\014\034\037\035" +
    "\001\002\000\020\007\ufff8\010\ufff8\012\ufff8\014\ufff8\027" +
    "\124\032\ufff8\037\ufff8\001\002\000\004\027\162\001\002" +
    "\000\016\007\ufff4\010\ufff4\012\ufff4\014\ufff4\032\ufff4\037" +
    "\ufff4\001\002\000\016\007\ufffe\010\ufffe\012\ufffe\014\ufffe" +
    "\032\ufffe\037\ufffe\001\002\000\004\037\143\001\002\000" +
    "\016\007\ufffa\010\ufffa\012\ufffa\014\ufffa\032\ufffa\037\ufffa" +
    "\001\002\000\004\031\133\001\002\000\016\007\ufffc\010" +
    "\ufffc\012\ufffc\014\ufffc\032\ufffc\037\ufffc\001\002\000\016" +
    "\007\027\010\024\012\031\014\034\032\132\037\035\001" +
    "\002\000\004\027\051\001\002\000\004\006\037\001\002" +
    "\000\016\007\ufff6\010\ufff6\012\ufff6\014\ufff6\032\ufff6\037" +
    "\ufff6\001\002\000\012\015\043\024\040\025\041\036\042" +
    "\001\002\000\004\040\047\001\002\000\004\036\046\001" +
    "\002\000\016\007\ufff3\010\ufff3\012\ufff3\014\ufff3\032\ufff3" +
    "\037\ufff3\001\002\000\004\040\044\001\002\000\004\036" +
    "\045\001\002\000\016\007\ufff1\010\ufff1\012\ufff1\014\ufff1" +
    "\032\ufff1\037\ufff1\001\002\000\016\007\ufff0\010\ufff0\012" +
    "\ufff0\014\ufff0\032\ufff0\037\ufff0\001\002\000\004\036\050" +
    "\001\002\000\016\007\ufff2\010\ufff2\012\ufff2\014\ufff2\032" +
    "\ufff2\037\ufff2\001\002\000\006\006\053\037\054\001\002" +
    "\000\004\030\112\001\002\000\004\037\103\001\002\000" +
    "\004\015\055\001\002\000\004\040\056\001\002\000\004" +
    "\036\057\001\002\000\006\026\061\037\062\001\002\000" +
    "\004\036\073\001\002\000\006\030\uffea\036\uffea\001\002" +
    "\000\004\023\063\001\002\000\012\005\065\026\066\037" +
    "\067\040\064\001\002\000\006\030\uffe8\036\uffe8\001\002" +
    "\000\006\005\070\037\071\001\002\000\006\030\uffe9\036" +
    "\uffe9\001\002\000\006\030\uffe7\036\uffe7\001\002\000\006" +
    "\030\uffe6\036\uffe6\001\002\000\004\005\072\001\002\000" +
    "\006\030\uffe5\036\uffe5\001\002\000\006\025\075\037\076" +
    "\001\002\000\004\030\uffdf\001\002\000\004\037\102\001" +
    "\002\000\006\024\077\025\100\001\002\000\004\040\101" +
    "\001\002\000\004\030\uffdd\001\002\000\004\030\uffde\001" +
    "\002\000\004\030\uffdc\001\002\000\004\015\104\001\002" +
    "\000\004\040\105\001\002\000\004\036\106\001\002\000" +
    "\006\026\061\037\062\001\002\000\004\036\110\001\002" +
    "\000\006\025\075\037\076\001\002\000\004\030\uffe0\001" +
    "\002\000\004\031\113\001\002\000\014\007\027\010\024" +
    "\012\031\014\034\037\035\001\002\000\016\007\027\010" +
    "\024\012\031\014\034\032\115\037\035\001\002\000\016" +
    "\007\uffe1\010\uffe1\012\uffe1\014\uffe1\032\uffe1\037\uffe1\001" +
    "\002\000\020\007\ufff9\010\ufff9\012\ufff9\014\ufff9\027\124" +
    "\032\ufff9\037\ufff9\001\002\000\016\007\ufff5\010\ufff5\012" +
    "\ufff5\014\ufff5\032\ufff5\037\ufff5\001\002\000\016\007\uffff" +
    "\010\uffff\012\uffff\014\uffff\032\uffff\037\uffff\001\002\000" +
    "\016\007\ufffb\010\ufffb\012\ufffb\014\ufffb\032\ufffb\037\ufffb" +
    "\001\002\000\016\007\ufffd\010\ufffd\012\ufffd\014\ufffd\032" +
    "\ufffd\037\ufffd\001\002\000\016\007\ufff7\010\ufff7\012\ufff7" +
    "\014\ufff7\032\ufff7\037\ufff7\001\002\000\006\026\061\037" +
    "\062\001\002\000\004\030\126\001\002\000\004\031\127" +
    "\001\002\000\014\007\027\010\024\012\031\014\034\037" +
    "\035\001\002\000\016\007\027\010\024\012\031\014\034" +
    "\032\131\037\035\001\002\000\020\007\uffe3\010\uffe3\012" +
    "\uffe3\014\uffe3\027\uffe3\032\uffe3\037\uffe3\001\002\000\004" +
    "\002\001\001\002\000\014\007\027\010\024\012\031\014" +
    "\034\037\035\001\002\000\016\007\027\010\024\012\031" +
    "\014\034\032\135\037\035\001\002\000\002\001\002\000" +
    "\004\027\137\001\002\000\006\026\061\037\062\001\002" +
    "\000\004\030\141\001\002\000\006\031\127\036\142\001" +
    "\002\000\016\007\uffe2\010\uffe2\012\uffe2\014\uffe2\032\uffe2" +
    "\037\uffe2\001\002\000\006\015\145\024\144\001\002\000" +
    "\004\005\154\001\002\000\004\005\146\001\002\000\006" +
    "\005\147\037\150\001\002\000\004\036\153\001\002\000" +
    "\004\005\151\001\002\000\004\036\152\001\002\000\016" +
    "\007\uffec\010\uffec\012\uffec\014\uffec\032\uffec\037\uffec\001" +
    "\002\000\016\007\uffee\010\uffee\012\uffee\014\uffee\032\uffee" +
    "\037\uffee\001\002\000\006\005\155\037\156\001\002\000" +
    "\004\036\161\001\002\000\004\005\157\001\002\000\004" +
    "\036\160\001\002\000\016\007\uffed\010\uffed\012\uffed\014" +
    "\uffed\032\uffed\037\uffed\001\002\000\016\007\uffef\010\uffef" +
    "\012\uffef\014\uffef\032\uffef\037\uffef\001\002\000\006\026" +
    "\061\037\062\001\002\000\004\030\164\001\002\000\004" +
    "\031\165\001\002\000\014\007\027\010\024\012\031\014" +
    "\034\037\035\001\002\000\016\007\027\010\024\012\031" +
    "\014\034\032\167\037\035\001\002\000\020\007\uffeb\010" +
    "\uffeb\011\170\012\uffeb\014\uffeb\032\uffeb\037\uffeb\001\002" +
    "\000\004\031\171\001\002\000\014\007\027\010\024\012" +
    "\031\014\034\037\035\001\002\000\016\007\027\010\024" +
    "\012\031\014\034\032\173\037\035\001\002\000\016\007" +
    "\uffe4\010\uffe4\012\uffe4\014\uffe4\032\uffe4\037\uffe4\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\032\004\025\006\031\007\027\010\022\011\035" +
    "\012\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\117\006\121\007\120\010\115\011\122\012\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\106\001\001\000\002" +
    "\001\001\000\004\005\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\113\004\025\006\031\007\027" +
    "\010\022\011\035\012\024\001\001\000\016\004\117\006" +
    "\121\007\120\010\115\011\122\012\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\127\004\025\006\031\007\027\010\022" +
    "\011\035\012\024\001\001\000\016\004\117\006\121\007" +
    "\120\010\115\011\122\012\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\133\004\025\006\031\007" +
    "\027\010\022\011\035\012\024\001\001\000\016\004\117" +
    "\006\121\007\120\010\115\011\122\012\116\001\001\000" +
    "\004\010\135\001\001\000\002\001\001\000\004\013\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\165\004\025\006\031\007\027\010\022\011\035\012\024" +
    "\001\001\000\016\004\117\006\121\007\120\010\115\011" +
    "\122\012\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\171\004\025\006\031\007\027\010\022\011" +
    "\035\012\024\001\001\000\016\004\117\006\121\007\120" +
    "\010\115\011\122\012\116\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntaxis$actions {
  private final Syntaxis parser;

  /** Constructor */
  CUP$Syntaxis$actions(Syntaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntaxis$do_action(
    int                        CUP$Syntaxis$act_num,
    java_cup.runtime.lr_parser CUP$Syntaxis$parser,
    java.util.Stack            CUP$Syntaxis$stack,
    int                        CUP$Syntaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntaxis$result;

      /* select the action based on the action number */
      switch (CUP$Syntaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_FOR ::= Identificador Igual Numero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero Punto_Coma SENTENCIA_BOOLEANA Punto_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR ::= For Parentesis_A SENTENCIA_FOR Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DO_WHILE ::= Do Llave_A SENTENCIA Llave_C WHILE Parentesis_A SENTENCIA_BOOLEANA Parentesis_C Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE ::= WHILE Parentesis_A SENTENCIA_BOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF_ELSE ::= If Parentesis_A SENTENCIA_BOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= If Parentesis_A SENTENCIA_BOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Identificador T_dato Op_incremento Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Identificador T_dato Igual Numero Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Identificador T_dato Op_atribucion Numero Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= Identificador T_dato Punto_Coma 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)).value;
		RESULT = start_val;
              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntaxis$parser.done_parsing();
          return CUP$Syntaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= Package Identificador Punto_Coma Public Estatico Void Main Parentesis_A Cadena Corchete_A Corchete_C Identificador Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Syntaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.elementAt(CUP$Syntaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Syntaxis$stack.peek()), RESULT);
            }
          return CUP$Syntaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

